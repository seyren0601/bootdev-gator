// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS (
    INSERT INTO feed_follows(user_id, feed_id, created_at, updated_at)
    VALUES(
        $1,
        $2,
        $3,
        $4
    )
    RETURNING user_id, feed_id, created_at, updated_at
)
SELECT  inserted.user_id AS UserID,
        inserted.feed_id AS FeedID,
        users.name AS UserName,
        feeds.name AS FeedName
FROM inserted
    INNER JOIN feeds ON inserted.feed_id = feeds.id
    INNER JOIN users ON inserted.user_id = users.id
`

type CreateFeedFollowParams struct {
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	Userid   uuid.UUID
	Feedid   uuid.UUID
	Username string
	Feedname sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.Userid,
		&i.Feedid,
		&i.Username,
		&i.Feedname,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec
DELETE 
FROM feed_follows
WHERE user_id = $1 AND feed_id = $2
`

type DeleteFeedFollowForUserParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.UserID, arg.FeedID)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT  users.name AS user_name,
        feeds.name AS feed_name,
        feeds.url AS feed_url
FROM feed_follows
    INNER JOIN users ON users.id = feed_follows.user_id
    INNER JOIN feeds ON feeds.id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	UserName string
	FeedName sql.NullString
	FeedUrl  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.UserName, &i.FeedName, &i.FeedUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
